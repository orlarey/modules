//############################## modular.lib ######################################
// This library contains a collection of modular synthesis modules.  
// Its official prefix is `mo`.
//#################################################################################

declare name "Faust Modular Synthesis Library";
declare version "0.0.1";

pl = library("platform.lib");
ma = library("maths.lib");
ba = library("basics.lib");
fi = library("filters.lib");
si = library("signals.lib");
en = library("envelopes.lib");
no = library("noises.lib");
os = library("oscillators.lib");




//################################### bpm #########################################
// bpm(n): Beat generator n
//#################################################################################

bpm(n) = vgroup("bpm %n", (1-pause) * beat
    with {
		pause = vslider("[2]pause[style:knob]",0,0,1,1);
		freq = vslider("[1]speed[style:knob][unit:bpm][scale:log]", 60, 6, 1200, 1)/60;
		length= vslider("phase[style:knob][unit:%]",10,0,99,1)/100;
        phasor(f) = f/ma.SR : (+,1:fmod)~_;
        start = _ <: mem,_ : >;
        beat = phasor(freq) <: start | <(length);
    });


//################################### adsr ########################################
// adsr(n): Envelop generator n
//#################################################################################

adsr(n) = vgroup("adsr %n", en.adsr(a,r,s,r)
with {
    a = vslider("A[1][style:knob][scale:log][unit:ms]", 10, 1, 2000, 0.1)/1000;
    s = vslider("S[2][style:knob][unit:%]", 90, 1, 100, 1)/100;
    r = vslider("R[3][style:knob][scale:log][unit:ms]", 10, 1, 2000, 1)/1000;
});



//#################################### lfo ########################################
// lfo(n): A LFO is a low frequency oscillator between 0 and 1
//#################################################################################

lfo(n) = vgroup("lfo %n",  phasor(freq) <: phasor2osc, 
                    						phasor2tri, 
                    						phasor2sawtooth, 
                    						phasor2square
                  						: interpolator(4, wave)
                  						: *(gain)
			with {
				phasor(f) = f/ma.SR : (+,1:fmod) ~ _;

				// phasor transformations
				normalize  = *(2) : -(1);
				phasor2osc = *(2*ma.PI) : sin : +(1) : *(0.5);
				phasor2sawtooth = _;
				phasor2square = >(0.5);
				phasor2tri = -(0.5) : abs : *(2) ;

				// user interface
				freq = vslider("freq[style:knob][unit:Hz][scale:log]", 1, 0.1, 40, 0.1);
				gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
				wave = vslider("wave[style:knob]", 1, 1, 4, 1)+0.5:int;

				// interpolation between N signals
				interpolator(N,sel) = par(i, N, *(ctrl(i+1))) :> _ 
					with {
						// le signal de control est à 1 quand sel == e
						ctrl(e) = 1 - min(1, abs(e - sel));
					};
			}
		);



//#################################### vco ########################################
// vco(n): multi wave vco n
//#################################################################################

vco(n) = vgroup("vco %n",  os.osc(freq), 
                    		os.triangle(freq), 
                    		os.sawtooth(freq), 
                            os.square(freq)
                  		: interpolator(4, wave)
                  		: *(gain)
			with {

				// user interface
				freq = vslider("freq[style:knob][unit:Hz][scale:log]", 440, 40, 8000, 1);
				gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
				wave = vslider("wave[style:knob]", 1, 1, 4, 1)+0.5:int;

				// interpolation between N signals
				interpolator(N,sel) = par(i, N, *(ctrl(i+1))) :> _ 
					with {
						// le signal de control est à 1 quand sel == e
						ctrl(e) = 1 - min(1, abs(e - sel));
					};
			}
		);

//#################################### clk ########################################
// clk(n): clock generator n
//#################################################################################

clock(n) = vgroup("clk %n",
	pulse(period,width,run)
	with {
		// UI
		period = vslider("period[unit:ms][style:knob][scale:log]", 250, 8, 10000,1)*ma.SR/1000 : max(2);
		width = vslider("width[style:knob]", 50, 1, 99, 1)/100;
		run = checkbox("run");
		led = vbargraph("ON[style:led]",0,1);
		
		// Implementation
		pulse(p,w,r) = phasor(p,r) > (1-w);
		phasor(p,r) = 1/p : (+,1:fmod:*(r)) ~ _;
	}
);



//################################## euclidian ####################################
// euclidian(n): euclidian rythm generator n (requires ondemand)
//#################################################################################


euclidian(n) = vgroup("eury %n", er(pulses,steps) 
	with {
		// UI: pulses < steps
		steps = vslider("steps[style:knob]", 16, 2, 16, 1)+0.5:int;
		pulses = vslider("pulses[style:knob]", 1, 1, 16, 1)+0.5:int : min(steps-1);

		// Implementation
		er(B,P,C) = C * ondemand((+(1):%(P))~_:*(B):%(P): decr)(upfront(C)); 
		decr(x) = x < x';
		upfront(x) = x > x';

	}
);


//################################## noise ####################################
// colored noise generator
//#################################################################################

noise(n) = vgroup("noise %n", no.colored_noise(3,alpha)*gain
	with {
		alpha = vslider("color[style:knob]", 0, -1, 1, 0.01);
		gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
	}
);

//################################## vcf ####################################
// vcf
//#################################################################################

vcf(n) = vgroup("vcf %n", fi.resonlp(fc,Q,gain)
with {
    fc = vslider("freq[style:knob][unit:Hz][scale:log]", 440, 20, 20000, 1);
    Q = vslider("q[style:knob]", 1, 0.5, 10, 0.5);
    gain = vslider("gain[style:knob]", 0, 0, 1, 0.1);

});