//############################## modular.lib ######################################
// This library contains a collection of modular synthesis modules.  
// Its official prefix is `mo`.
//#################################################################################

declare name "Faust Modular Synthesis Library";
declare author "Yann Orlarey";
declare version "0.0.1";

pl = library("platform.lib");
ma = library("maths.lib");
ba = library("basics.lib");
fi = library("filters.lib");
si = library("signals.lib");
en = library("envelopes.lib");
no = library("noises.lib");
os = library("oscillators.lib");
ef = library("misceffects.lib");




//################################### bpm #########################################
// bpm(n): Beat generator n
//#################################################################################

bpm(n) = vgroup("%n.BPM", (1-pause) * beat
    with {
		pause = vslider("[2]pause[style:knob]",0,0,1,1);
		freq = vslider("[1]bpm[style:knob][unit:bpm][scale:log]", 60, 6, 1200, 1)/60;
		length= vslider("width[style:knob][unit:%]",10,0,99,1)/100;
        phasor(f) = f/ma.SR : (+,1:fmod)~_;
        start = _ <: mem,_ : >;
        beat = phasor(freq) <: start | <(length);
    });


//################################### adsr ########################################
// adsr(n): Envelop generator n
//#################################################################################

adsr(n) = vgroup("%n.ADSR", en.adsr(a,r,s,r)
with {
    a = vslider("A[1][style:knob][scale:log][unit:ms]", 10, 1, 2000, 0.1)/1000;
    s = vslider("S[2][style:knob][unit:%]", 90, 1, 100, 1)/100;
    r = vslider("R[3][style:knob][scale:log][unit:ms]", 10, 1, 2000, 1)/1000;
});



//################################### adsr ########################################
// env(n): Exponential Attack Release envelop generator n
//#################################################################################

env(n) = vgroup("%n.ENV", are(curv,natt,nrel)
with {
	are(cu,na,nr) = button("[4]trig") : upfront : \(mode,vc,trig).((trig>0) | (mode == 1) & (vc<(1-cu)), vc + (mode==1)*a*(1-vc) - (mode==0)*r*vc) ~(_,_) : !,_ : -(cu) : max(0) : /(1-2*cu) 
    with { 
		upfront(x) = x>x'; 
        a=t2a(natt,cu);  
        r=t2a(nrel,cu); 
        t2a(n,s) = 1 - s^(1/(n+1));
    };
    curv = vslider("[1]F[style:knob][tooltip:increase the flatness of the curves]", 3, 1, 10, 0.1)/100; // Curvature of attack and release
    natt = vslider("[2]A[style:knob][unit:ms][tooltip:attack time in ms]", 3, 1, 50, 0.1)*ma.SR/1000:int;
    nrel = vslider("[3]R[style:knob][unit:ms][tooltip:release time in ms]", 15, 1, 1000, 0.1)*ma.SR/1000:int;
});


//#################################### lfo ########################################
// lfo(n): A LFO is a low frequency oscillator between -1 and 1 with midpoint 0
//#################################################################################

lfo(n) = vgroup("%n.LFO",  osc(freq), tri(freq), saw(freq), square(freq), dirac(freq)
                  		 : interpolator(5, wave) : *(gain)
			with {
				phasor(f) = f/ma.SR : (+,1:fmod) ~ _;

				// phasor transformations
				osc(freq) = phasor(freq)*2*ma.PI : sin;
				tri(freq) = phasor(freq) - 0.5 : abs : -(0.25) : *(4);
				saw(freq) = phasor(freq) - 0.5 : *(2);
				square(freq) = phasor(freq) < width : -(0.5) : *(2);
				dirac(freq) = (phasor(freq) == 0) | (phasor(freq) < phasor(freq)');

				// user interface
				freq = vslider("freq[style:knob][unit:Hz][scale:log]", 1, 0.1, 160, 0.1);
				gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
				wave = vslider("wave[style:knob]", 1, 1, 5, 1)+0.5:int;
				width = vslider("width[style:knob]", 50, 1, 99, 1)/100;

				// interpolation between N signals
				interpolator(N,sel) = par(i, N, *(ctrl(i+1))) :> _ 
					with {
						// le signal de control est à 1 quand sel == e
						ctrl(e) = 1 - min(1, abs(e - sel));
					};
			}
		);


//#################################### vco ########################################
// vco(n): multi wave vco n
//#################################################################################

vco(n) = vgroup("%n.VCO",  os.osc(freq), 
                    		os.triangle(freq), 
                    		os.sawtooth(freq), 
                            os.square(freq)
                  		: interpolator(4, wave)
                  		: *(gain)
			with {

				// user interface
				freq = vslider("freq[style:knob][unit:Hz][scale:log]", 440, 40, 8000, 1);
				gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
				wave = vslider("wave[style:knob]", 1, 1, 4, 1)+0.5:int;

				// interpolation between N signals
				interpolator(N,sel) = par(i, N, *(ctrl(i+1))) :> _ 
					with {
						// le signal de control est à 1 quand sel == e
						ctrl(e) = 1 - min(1, abs(e - sel));
					};
			}
		);

//#################################### clk ########################################
// clk(n): clock generator n
//#################################################################################

clock(n) = vgroup("%n.CLOCK",
	pulse(period,width,run)
	with {
		// UI
		period = vslider("period[unit:ms][style:knob][scale:log]", 250, 8, 10000,1)*ma.SR/1000 : max(2);
		width = vslider("width[style:knob]", 50, 1, 99, 1)/100;
		run = checkbox("run");
		led = vbargraph("ON[style:led]",0,1);
		
		// Implementation
		pulse(p,w,r) = phasor(p,r) > (1-w);
		phasor(p,r) = 1/p : (+,1:fmod:*(r)) ~ _;
	}
);



//################################## euclidian ####################################
// euclidian(n): euclidian rythm generator n (requires ondemand)
//#################################################################################


euclidian(n) = vgroup("%n.EUCLID", er(pulses,steps) 
	with {
		// UI: pulses < steps
		steps = vslider("steps[style:knob]", 16, 2, 16, 1)+0.5:int;
		pulses = vslider("pulses[style:knob]", 1, 1, 16, 1)+0.5:int : min(steps-1);

		// Implementation
		er(B,P,C) = C * ondemand((+(1):%(P))~_:*(B):%(P): decr)(upfront(C)); 
		decr(x) = x < x';
		upfront(x) = x > x';

	}
);


//################################## noise ####################################
// colored noise generator
//#################################################################################

noise(n) = vgroup("%n.NOISE", no.colored_noise(3,alpha)*gain
	with {
		alpha = vslider("color[style:knob]", 0, -1, 1, 0.01);
		gain = vslider("gain[style:knob]", 0, 0, 1, 0.01);
	}
);

//################################## vcf ####################################
// vcf
//#################################################################################

vcf(n) = vgroup("%n.VCF", fi.resonlp(fc,Q,gain)
with {
    fc = vslider("freq[style:knob][unit:Hz][scale:log]", 440, 10, 20000, 1);
    Q = vslider("q[style:knob]", 1, 0.5, 10, 0.5);
    gain = vslider("gain[style:knob]", 0, 0, 1, 0.1);

});

//################################## echo ####################################
// echo
//#################################################################################

echo(n) = vgroup("%n.ECHO", block(0.9) : ef.echo(1, dur, fback)
with {
    dur = vslider("dur[style:knob][scale:log]", 250, 1, 999, 0.1)/1000 : si.smooth(0.9999);
    fback = vslider("feedback[style:knob]", 0.1, 0, 1, 0.01);
	block(th) = *(min(1, (1-fback)/(1-th))); // progressively block the input
});


//################################## pan ####################################
// pan
//#################################################################################

pan(n) = vgroup("%n.PAN", _ <: *(sqrt(1-p)), *(sqrt(p)) 
with {
    p = vslider("pan[style:knob]", 50, 0.1, 99.9, 0.1)/100;
});


//################################## autoppan ####################################
// autopan
//#################################################################################

autopan(n) = vgroup("%n.APAN",  ["pan":mod -> pan(0)](["wave":1, "width":1 -> lfo(0)]));

//----------------------------------------------------------------------------------
// Generate random pitches (based on ondemand)
key(n) = vgroup("%n.KEY", trig : ondemand(irnd(k1,k2) : loop(rn,ln) : ba.midikey2hz))
	with {
		random = +(12345) ~ *(1103515245);
		noise = random / 2147483647;
		irnd(x,y) = x+(noise+1)/2*(y-x);
		upfront(x) = x>x';
		loop(n,m) = select2(every(n)|for(m)) ~ @(m-1) 
			with {
				every(n) = ((+(1):%(n))~_)' == 0; // 1 every n samples 0 otherwise
				for(n) = 1-1@n;
			};
		// UI
    	k1 = vslider("[1]key[style:knob]", 60, 0, 127, 1);
		k2 = k1+vslider("[2]delta[style:knob]", 0, 0, 24, 1);
		ln = vslider("[3]len[style:knob]", 3, 2, 64, 1);
		rn = vslider("[4]renew[style:knob]", 11, 2, 127, 1);
		trig = button("[5]trig"): upfront;
	};




//----------------------------------------------------------------------------------

//################################## mod ####################################
// a modulation circuit to use with widget modulation and LFOs
//#################################################################################

mod(s, m) = s + (h - s) * max(0, m) + (s - l) * min(0, m)
    with {
        l = lowest(s);
        h = highest(s);
    };
